"""
This file contains exhaustive list of all the metrics those can be collected to monitor CouchDB.
"""

couchdb_metrics = {
    "basic_metrics" : {
        "node_metrics" : [
            ("couchdb.httpd.aborted_requests.value", "counter"),
            ("couchdb.httpd.bulk_requests.value", "counter"),
            ("couchdb.httpd.requests.value", "counter"),
            ("couchdb.httpd.temporary_view_reads.value", "counter"),
            ("couchdb.httpd.view_reads.value", "counter"),
            ("couchdb.auth_cache_hits.value", "counter"),
            ("couchdb.auth_cache_misses.value", "counter"),
            ("couchdb.database_writes.value", "counter"),
            ("couchdb.database_reads.value", "counter"),
            ("couchdb.document_inserts.value", "counter"),
            ("couchdb.document_writes.value", "counter"),
            ("couchdb.httpd_request_methods.COPY.value", "counter"),
            ("couchdb.httpd_request_methods.DELETE.value", "counter"),
            ("couchdb.httpd_request_methods.GET.value", "counter"),
            ("couchdb.httpd_request_methods.HEAD.value", "counter"),
            ("couchdb.httpd_request_methods.OPTIONS.value", "counter"),
            ("couchdb.httpd_request_methods.POST.value", "counter"),
            ("couchdb.httpd_request_methods.PUT.value", "counter"),
            ("couchdb.httpd_status_codes.200.value", "counter"),
            ("couchdb.httpd_status_codes.201.value", "counter"),
            ("couchdb.httpd_status_codes.202.value", "counter"),
            ("couchdb.httpd_status_codes.400.value", "counter"),
            ("couchdb.httpd_status_codes.401.value", "counter"),
            ("couchdb.httpd_status_codes.403.value", "counter"),
            ("couchdb.httpd_status_codes.404.value", "counter"),
            ("couchdb.httpd_status_codes.409.value", "counter"),
            ("couchdb.httpd_status_codes.500.value", "counter"),
            ("couchdb.httpd_status_codes.501.value", "counter"),
            ("couchdb.open_databases.value", "counter"),
            ("couchdb.open_os_files.value", "counter"),
            ("couchdb.request_time.value.min","gauge"),
            ("couchdb.request_time.value.max","gauge"),
            ("couchdb.request_time.value.arithmetic_mean","gauge"),
            ("couchdb.request_time.value.percentile.90","gauge"),
            ("mem3.shard_cache.hit.value", "counter"),
            ("mem3.shard_cache.miss.value", "counter")
        ],
        "db_metrics" : [
            ("sizes.external", "gauge"),
            ("sizes.active", "gauge"),
            ("sizes.file", "gauge"),
            ("doc_del_count", "gauge"),
            ("doc_count", "gauge"),
        ]
    },

    # By default only basic_metrics are enabled.
    # To enable enhanced_metrics:
    #   Uncomment the required metrics below.
    #   Add 'EnhancedMetrics' 'True' to the conf file
    "enhanced_metrics" : {
        "node_metrics" : [
            # ("couchdb.httpd_status_codes.204.value", "counter"),
            # ("couchdb.httpd_status_codes.206.value", "counter"),
            # ("couchdb.httpd_status_codes.301.value", "counter"),
            # ("couchdb.httpd_status_codes.302.value", "counter"),
            # ("couchdb.httpd_status_codes.304.value", "counter"),
            # ("couchdb.httpd_status_codes.405.value", "counter"),
            # ("couchdb.httpd_status_codes.406.value", "counter"),
            # ("couchdb.httpd_status_codes.412.value", "counter"),
            # ("couchdb.httpd_status_codes.413.value", "counter"),
            # ("couchdb.httpd_status_codes.414.value", "counter"),
            # ("couchdb.httpd_status_codes.415.value", "counter"),
            # ("couchdb.httpd_status_codes.416.value", "counter"),
            # ("couchdb.httpd_status_codes.417.value", "counter"),
            # ("couchdb.couch_server.lru_skip.value", "counter"),
            # ("couchdb.query_server.vdu_rejects.value", "counter"),
            # ("couchdb.collect_results_time.value.min","gauge"),
            # ("couchdb.collect_results_time.value.max","gauge"),
            # ("couchdb.collect_results_time.value.arithmetic_mean","gauge"),
            # ("couchdb.collect_results_time.value.standard_deviation","gauge"),
            # ("couchdb.collect_results_time.value.percentile.50","gauge"),
            # ("couchdb.collect_results_time.value.percentile.75","gauge"),
            # ("couchdb.collect_results_time.value.percentile.90","gauge"),
            # ("couchdb.collect_results_time.value.percentile.99", "gauge"),
            # ("couchdb.collect_results_time.value.percentile.999","gauge"),
            # ("couchdb.request_time.value.standard_deviation","gauge"),
            # ("couchdb.request_time.value.percentile.50","gauge"),
            # ("couchdb.request_time.value.percentile.75","gauge"),
            # ("couchdb.request_time.value.percentile.99", "gauge"),
            # ("couchdb.request_time.value.percentile.999","gauge"),
            # ("couchdb.couch_server.lru_skip.value", "counter"),
            # ("couchdb.query_server.vdu_rejects.value", "counter"),
            # ("couch_replicator.changes_read_failures.value", "counter"),
            # ("couch_replicator.changes_reader_deaths.value", "counter"),
            # ("couch_replicator.changes_manager_deaths.value", "counter"),
            # ("couch_replicator.changes_queue_deaths.value", "counter"),
            # ("couch_replicator.checkpoints.success.value", "counter"),
            # ("couch_replicator.checkpoints.failure.value", "counter"),
            # ("couch_replicator.failed_starts.value", "counter"),
            # ("couch_replicator.requests.value", "counter"),
            # ("couch_replicator.responses.failure.value", "counter"),
            # ("couch_replicator.responses.success.value", "counter"),
            # ("couch_replicator.stream_responses.failure.value", "counter"),
            # ("couch_replicator.stream_responses.success.value", "counter"),
            # ("couch_replicator.worker_deaths.value", "counter"),
            # ("couch_replicator.workers_started.value", "counter"),
            # ("rexi.buffered.value", "counter"),
            # ("rexi.down.value", "counter"),
            # ("rexi.dropped.value", "counter"),
            # ("rexi.streams.timeout.init_stream.value", "counter"),
            # ("rexi.streams.timeout.stream.value", "counter"),
            # ("rexi.streams.timeout.wait_for_ack.value", "counter"),
            # ("couch_log.level.alert.value", "counter"),
            # ("couch_log.level.critical.value", "counter"),
            # ("couch_log.level.debug.value", "counter"),
            # ("couch_log.level.emergency.value", "counter"),
            # ("couch_log.level.error.value", "counter"),
            # ("couch_log.level.info.value", "counter"),
            # ("couch_log.level.notice.value", "counter"),
            # ("couch_log.level.warning.value", "counter"),
            # ("pread.exceed_eof.value", "counter"),
            # ("pread.exceed_limit.value", "counter"),
            # ("ddoc_cache.hit.value", "counter"),
            # ("ddoc_cache.miss.value", "counter"),
            # ("ddoc_cache.recovery.value", "counter"),
            # ("global_changes.db_writes.value", "counter"),
            # ("global_changes.event_doc_conflict.value", "counter"),
            # ("global_changes.listener_pending_updates.value", "gauge"),
            # ("global_changes.rpcs.value", "counter"),
            # ("global_changes.server_pending_updates.value", "counter"),
            # ("fabric.worker.timeouts.value", "counter"),
            # ("fabric.read_repairs.success.value", "counter"),
            # ("fabric.read_repairs.failure.value", "counter"),
            # ("fabric.doc_update.errors.value", "counter"),
            # ("fabric.doc_update.mismatched_errors.value", "counter"),
            # ("fabric.doc_update.write_quorum_errors.value", "counter"),
        ]
    }
}

